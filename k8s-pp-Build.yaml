name: Install Terraform on agent
trigger:
  - UAT

parameters:
- name: createdestroy
  type: string 
  default: 'apply'

- name: poolname
  type: string 
  default: 'Azure Pipelines'

- name: clients_id
  type: string 
  default: 'e0051092-9c36-465b-97ec-71f173494a02'

- name: clients_secret
  type: string

resources:
- repo: self

variables:
  imageRepo: 'k8spythonapp'
  tag: 'v1'

stages:
- stage: INstall_Terraform  
  jobs:
  - job: INstall_Terraform 
    displayName: Agent job 1
    pool:
      #name: Azure Pipelines
      name: ${{ parameters.poolname }}
    steps:
    - script: |
        if command -v terraform &> /dev/null; then
          echo "Terraform is installed"
        else
          sudo apt update -y
          sudo apt install unzip -y 
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common -y
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update -y
          sudo apt-get install terraform -y
        fi
      displayName: 'Command Line Script'
    - script: |
        if command -v docker-compose &> /dev/null; then
          echo "docker-compose is installed"
        else
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi
      displayName: 'Command Line Script'

- stage: Validate_Terraform
  jobs:
  - job: Validate_Terraform
    displayName: Agent job 3
    pool:
      #name: Azure Pipelines
      name: ${{ parameters.poolname }}
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: Init
      inputs:
        workingDirectory: '$(Build.SourcesDirectory)/terraform/'
        backendServiceArm: 'az-devops-sp-vishwa'
        backendAzureRmResourceGroupName: 'rg01'
        backendAzureRmStorageAccountName: cts2024devopsvishwa
        backendAzureRmContainerName: teamcontainer
        backendAzureRmKey: vishwa-uat.tfstate
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: validate
      inputs:
        command: validate
        workingDirectory: '$(Build.SourcesDirectory)/terraform/'
        environmentServiceNameAzureRM: 'az-devops-sp-vishwa'

- stage: Apply_Terraform
  dependsOn: Validate_Terraform

  jobs:
  - job: Plan_Apply_Terraform 
    
    displayName: Agent job 4
    #timeoutInMinutes: 5
    pool:
      #name: Azure Pipelines
      name: ${{ parameters.poolname }}    
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: Init
      inputs:
        workingDirectory: '$(Build.SourcesDirectory)/terraform/'
        backendServiceArm: 'az-devops-sp-vishwa'
        backendAzureRmResourceGroupName: 'rg01'
        backendAzureRmStorageAccountName: cts2024devopsvishwa
        backendAzureRmContainerName: teamcontainer
        backendAzureRmKey: vishwa-uat.tfstate
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: Plan
      inputs:
        workingDirectory: '$(Build.SourcesDirectory)/terraform/'
        command: plan
        commandOptions: '-var client_id=${{ parameters.clients_id }}  -var client_secret=${{ parameters.clients_secret }}'
        environmentServiceNameAzureRM: 'az-devops-sp-vishwa'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: Apply Or Destroy
      inputs:
        workingDirectory: '$(Build.SourcesDirectory)/terraform/'
        command: ${{ parameters.createdestroy }}
        commandOptions: '-var client_id=${{ parameters.clients_id }}  -var client_secret=${{ parameters.clients_secret }}'
        environmentServiceNameAzureRM: 'az-devops-sp-vishwa'
        
- stage: Build_Image
  dependsOn: Apply_Terraform
  jobs:
  - job: Build_Image
    displayName: Build_Image
    pool:
      name: ${{ parameters.poolname }} 
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'acr-login'
        repository: '$(imageRepo)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
        tags: |
          $(Build.BuildId)
          $(tag)
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/k8s-manifests'
        artifact: 'manifest'
        publishLocation: 'pipeline'

- stage: Run_Image
  dependsOn: Build_Image
  jobs:
  - job: Run_Image
    displayName: Run_Image
    pool:
      name: ${{ parameters.poolname }} 
    steps:
    - script: |
        docker-compose down | true
        docker-compose up --build -d

- stage: IntegrationTest
  displayName: 'Run Integration Tests'
  dependsOn: Run_Image
  jobs:
  - job: IntegrationTest
    displayName: 'Run inte Tests'
    pool:
      name: ${{ parameters.poolname }} 
    steps:
    - script: | 
        pip install -r $(Pipeline.Workspace)/s/inte-test/requirements.txt  # Install dependencies
        python3 $(Pipeline.Workspace)/s/inte-test/integration-test.py  # Run unit tests

- stage: UnitTest
  displayName: 'Run Unit Tests'
  dependsOn: Run_Image
  jobs:
  - job: RunUnitTests
    displayName: 'Run Unit Tests'
    pool:
      name: ${{ parameters.poolname }} 
    steps:
    - script: |
        pip install -r unit-test/requirements.txt  # Install dependencies
        #python3 -m unittest discover $(Pipeline.Workspace)/s/unit-test  # Run unit tests
        python3 $(Pipeline.Workspace)/s/unit-test/test_module.py

- stage: UploadArtifacts
  dependsOn: UnitTest
  jobs:
  - job: UploadArtifacts
    displayName: Artifacts
    pool:
      #name: Azure Pipelines
      name: ${{ parameters.poolname }}  
    steps:
    - script: |
        wget -qO - https://releases.jfrog.io/artifactory/jfrog-gpg-public/jfrog_public_gpg.key | sudo apt-key add -
        echo "deb https://releases.jfrog.io/artifactory/jfrog-debs xenial contrib" | sudo tee -a /etc/apt/sources.list &&    sudo apt update && sudo apt install -y jfrog-cli-v2-jf && jf intro
      displayName: Install the JFrog.

    - script: |
        # Configue JFrog CLI with Artifactory server details
        jf config remove jfrog-server1 --quiet | true
        jf config add jfrog-server1 --url=https://stackroute.jfrog.io/artifactory/ --artifactory-url=https://stackroute.jfrog.io/artifactory/ --user=vishwanath@vishwacloudlab.com --password=Reset123 --interactive=false
      displayName: 'Configure JFrog server'

    - script: |
        # Upload yaml file
        #jf rt u --recursive $(Pipeline.Workspace)/s/k8s-manifests/ k8s-yaml-generic-local/
        #jf rt u --recursive $(find $(Pipeline.Workspace)/s/k8s-manifests -type f) k8s-yaml-generic-local/k8s-manifests/
        for file in $(find $(Pipeline.Workspace)/s/k8s-manifests -type f); do
          # Upload the current file
          jf rt u "$file" k8s-yaml-generic-local/k8s-manifests/
        done
      displayName: 'Upload yaml to JFrog server'

- stage: LoadTesting
  dependsOn: UploadArtifacts
  jobs:
  - job: LoadTesting
    displayName: LoadTesting
    pool:
      #name: Azure Pipelines
      name: ${{ parameters.poolname }}  
    steps:
    - task: CmdLine@2
      inputs:
        script: |
          sudo apt install default-jre -y
          sudo apt install unzip -y

          wget https://dlcdn.apache.org//jmeter/source/apache-jmeter-5.6.3_src.tgz
          tar -xvf apache-jmeter-5.6.3_src.tgz
          ./apache-jmeter-5.6.3/bin/jmeter --version
          PATH=$PWD/apache-jmeter-5.6.3/bin:$PATH
    - task: CmdLine@2
      inputs:
        script: |
          'jmeter -n -t $(Pipeline.Workspace)/s/Loadtesting/test.jmx -l results.jtl'